dependencies {
    implementation project(':redis-smart-cache-core')
    implementation group: 'com.redis', name: 'lettucemod', version: lettucemodVersion
    implementation 'io.micrometer:micrometer-core'
    implementation group: 'io.trino', name: 'trino-parser', version: trinoVersion
    implementation group: 'io.airlift', name: 'units', version: airliftVersion
    testImplementation project(':redis-smart-cache-test')
    testImplementation group: 'org.awaitility', name: 'awaitility', version: awaitilityVersion    
    testImplementation 'org.slf4j:slf4j-jdk14'
    testImplementation 'org.postgresql:postgresql'
    testImplementation 'com.oracle.database.jdbc:ojdbc8'
    testImplementation 'com.mysql:mysql-connector-j'
    testImplementation group: 'com.microsoft.sqlserver', name: 'mssql-jdbc', version: mssqlVersion
    testImplementation group: 'com.ibm.db2', name: 'jcc', version: db2Version    
    testImplementation group: 'com.redis.testcontainers', name: 'testcontainers-redis-junit', version: testcontainersRedisVersion
    testImplementation group: 'org.testcontainers', name: 'postgresql', version: testcontainersVersion
    testImplementation group: 'org.testcontainers', name: 'oracle-xe', version: testcontainersVersion
    testImplementation group: 'org.testcontainers', name: 'mssqlserver', version: testcontainersVersion
    testImplementation group: 'org.testcontainers', name: 'db2', version: testcontainersVersion
    testImplementation group: 'org.testcontainers', name: 'mysql', version: testcontainersVersion
}

bootJar {
    enabled = false
}

jar {
    archiveClassifier = ''
}

jar.finalizedBy shadowJar

shadowJar {
   archiveClassifier = ''
}

import com.github.jengelman.gradle.plugins.shadow.tasks.ConfigureShadowRelocation

task relocateShadowJar(type: ConfigureShadowRelocation) {
    target = tasks.shadowJar
    prefix = "com.redis.smartcache.shaded"
}

tasks.shadowJar.dependsOn tasks.relocateShadowJar

jmh {
    fork = 1
    iterations = 1
    timeUnit = 'ms'
    warmup = '1s'
    warmupForks = 0
    warmupIterations = 0
}

jmhJar {
    exclude('org/slf4j/impl/**')
}

compileJava {
    options.release = 8
}