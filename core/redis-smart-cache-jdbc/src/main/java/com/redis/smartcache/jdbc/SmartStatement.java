package com.redis.smartcache.jdbc;

import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.SQLWarning;
import java.sql.Statement;
import java.util.concurrent.Callable;

import javax.sql.rowset.CachedRowSet;

import com.redis.smartcache.core.Query;

public class SmartStatement implements Statement {

	protected final SmartConnection connection;
	protected final Statement statement;
	private QueryExecution queryExecution;

	public SmartStatement(SmartConnection connection, Statement statement) {
		this.connection = connection;
		this.statement = statement;
	}

	@Override
	public <T> T unwrap(Class<T> iface) throws SQLException {
		checkClosed();
		if (iface.isAssignableFrom(getClass())) {
			return iface.cast(this);
		}
		throw new SQLException("Cannot unwrap to " + iface.getName());
	}

	@Override
	public boolean isWrapperFor(Class<?> iface) throws SQLException {
		checkClosed();
		return iface.isAssignableFrom(getClass());
	}

	@Override
	public ResultSet executeQuery(String sql) throws SQLException {
		return executeQuery(sql, () -> statement.executeQuery(sql));
	}

	protected String id(Query query) {
		return query.getId();
	}

	protected boolean execute(String sql, Callable<Boolean> executable) throws SQLException {
		Query query = connection.fireRules(sql);
		try {
			return query.getTimer().recordCallable(() -> {
				queryExecution = getCachedExecution(query);
				if (queryExecution.hasResultSet()) {
					return true;
				}
				return query.getBackendTimer().recordCallable(executable);
			});
		} catch (SQLException e) {
			throw e;
		} catch (Exception e) {
			throw new SQLException(e);
		}
	}

	protected ResultSet executeQuery(String sql, Callable<ResultSet> callable) throws SQLException {
		Query query = connection.fireRules(sql);
		try {
			return query.getTimer().recordCallable(() -> {
				QueryExecution execution = getCachedExecution(query);
				if (execution.hasResultSet()) {
					return execution.getResultSet();
				}
				return cacheResultSet(execution.getQuery(), query.getBackendTimer().recordCallable(callable));
			});
		} catch (SQLException e) {
			throw e;
		} catch (Exception e) {
			throw new SQLException(e);
		}
	}

	private void checkClosed() throws SQLException {
		if (isClosed()) {
			throw new SQLException("This statement has been closed.");
		}
	}

	private ResultSet cacheResultSet(Query query, ResultSet resultSet) throws SQLException {
		if (query.isCaching()) {
			CachedRowSet cachedRowSet = connection.createCachedRowSet();
			cachedRowSet.populate(resultSet);
			cachedRowSet.beforeFirst();
			query.getCachePutTimer()
					.record(() -> connection.getResultSetCache().put(id(query), query.getTtl(), cachedRowSet));
			cachedRowSet.beforeFirst();
			return cachedRowSet;
		}
		return resultSet;
	}

	private static class QueryExecution {

		private final Query query;
		private final ResultSet resultSet;

		public QueryExecution(Query query) {
			this(query, null);
		}

		public QueryExecution(Query query, ResultSet resultSet) {
			this.query = query;
			this.resultSet = resultSet;
		}

		public boolean hasResultSet() {
			return resultSet != null;
		}

		public Query getQuery() {
			return query;
		}

		public ResultSet getResultSet() {
			return resultSet;
		}

	}

	private QueryExecution getCachedExecution(Query query) throws Exception {
		if (query.isCaching()) {
			ResultSet resultSet = query.getCacheGetTimer()
					.recordCallable(() -> connection.getResultSetCache().get(id(query)));
			if (resultSet == null) {
				query.getCacheMissCounter().increment();
			} else {
				query.getCacheHitCounter().increment();
			}
			return new QueryExecution(query, resultSet);
		}
		return new QueryExecution(query);
	}

	@Override
	public boolean execute(String sql) throws SQLException {
		return execute(sql, () -> statement.execute(sql));
	}

	@Override
	public boolean execute(String sql, int autoGeneratedKeys) throws SQLException {
		return execute(sql, () -> statement.execute(sql, autoGeneratedKeys));
	}

	@Override
	public boolean execute(String sql, int[] columnIndexes) throws SQLException {
		return execute(sql, () -> statement.execute(sql, columnIndexes));
	}

	@Override
	public boolean execute(String sql, String[] columnNames) throws SQLException {
		return execute(sql, () -> statement.execute(sql, columnNames));
	}

	@Override
	public ResultSet getResultSet() throws SQLException {
		if (queryExecution == null) {
			throw new SQLException("No execute method was called previously");
		}
		if (queryExecution.hasResultSet()) {
			return queryExecution.getResultSet();
		}
		return cacheResultSet(queryExecution.getQuery(), statement.getResultSet());
	}

	@Override
	public int getUpdateCount() throws SQLException {
		return statement.getUpdateCount();
	}

	@Override
	public boolean getMoreResults() throws SQLException {
		return statement.getMoreResults();
	}

	@Override
	public void setFetchDirection(int direction) throws SQLException {
		statement.setFetchDirection(direction);
	}

	@Override
	public int getFetchDirection() throws SQLException {
		return statement.getFetchDirection();
	}

	@Override
	public void setFetchSize(int rows) throws SQLException {
		statement.setFetchSize(rows);
	}

	@Override
	public int getFetchSize() throws SQLException {
		return statement.getFetchSize();
	}

	@Override
	public int getResultSetConcurrency() throws SQLException {
		return statement.getResultSetConcurrency();
	}

	@Override
	public int getResultSetType() throws SQLException {
		return statement.getResultSetType();
	}

	@Override
	public void addBatch(String sql) throws SQLException {
		statement.addBatch(sql);
	}

	@Override
	public void clearBatch() throws SQLException {
		statement.clearBatch();
	}

	@Override
	public int[] executeBatch() throws SQLException {
		return statement.executeBatch();
	}

	@Override
	public SmartConnection getConnection() throws SQLException {
		return connection;
	}

	@Override
	public boolean getMoreResults(int current) throws SQLException {
		return statement.getMoreResults();
	}

	@Override
	public ResultSet getGeneratedKeys() throws SQLException {
		return statement.getGeneratedKeys();
	}

	@Override
	public int executeUpdate(String sql, int autoGeneratedKeys) throws SQLException {
		return statement.executeUpdate(sql, autoGeneratedKeys);
	}

	@Override
	public int executeUpdate(String sql, int[] columnIndexes) throws SQLException {
		return statement.executeUpdate(sql, columnIndexes);
	}

	@Override
	public int executeUpdate(String sql, String[] columnNames) throws SQLException {
		return statement.executeUpdate(sql, columnNames);
	}

	@Override
	public int getResultSetHoldability() throws SQLException {
		return statement.getResultSetHoldability();
	}

	@Override
	public boolean isClosed() throws SQLException {
		return statement.isClosed();
	}

	@Override
	public void setPoolable(boolean poolable) throws SQLException {
		statement.setPoolable(poolable);
	}

	@Override
	public boolean isPoolable() throws SQLException {
		return statement.isPoolable();
	}

	@Override
	public void closeOnCompletion() throws SQLException {
		statement.closeOnCompletion();
	}

	@Override
	public boolean isCloseOnCompletion() throws SQLException {
		return statement.isCloseOnCompletion();
	}

	@Override
	public int executeUpdate(String sql) throws SQLException {
		return statement.executeUpdate(sql);
	}

	@Override
	public void close() throws SQLException {
		statement.close();
		queryExecution = null;
	}

	@Override
	public int getMaxFieldSize() throws SQLException {
		return statement.getMaxFieldSize();
	}

	@Override
	public void setMaxFieldSize(int max) throws SQLException {
		statement.setMaxFieldSize(max);
	}

	@Override
	public int getMaxRows() throws SQLException {
		return statement.getMaxRows();
	}

	@Override
	public void setMaxRows(int max) throws SQLException {
		statement.setMaxRows(max);
	}

	@Override
	public void setEscapeProcessing(boolean enable) throws SQLException {
		statement.setEscapeProcessing(enable);
	}

	@Override
	public int getQueryTimeout() throws SQLException {
		return statement.getQueryTimeout();
	}

	@Override
	public void setQueryTimeout(int seconds) throws SQLException {
		statement.setQueryTimeout(seconds);
	}

	@Override
	public void cancel() throws SQLException {
		statement.cancel();
	}

	@Override
	public SQLWarning getWarnings() throws SQLException {
		return statement.getWarnings();
	}

	@Override
	public void clearWarnings() throws SQLException {
		statement.clearWarnings();
	}

	@Override
	public void setCursorName(String name) throws SQLException {
		statement.setCursorName(name);
	}

}
