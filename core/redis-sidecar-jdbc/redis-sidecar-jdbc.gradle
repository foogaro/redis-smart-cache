dependencies {
    implementation group: 'com.redis', name: 'lettucemod', version: lettucemodVersion
    implementation 'org.apache.commons:commons-pool2'
    implementation 'com.fasterxml.jackson.core:jackson-databind'
    implementation 'com.fasterxml.jackson.dataformat:jackson-dataformat-properties'
    implementation group: 'com.redis', name: 'micrometer-registry-redistimeseries', version: micrometerRtsVersion
    implementation group: 'io.trino', name: 'trino-parser', version: trinoVersion
    testImplementation 'org.postgresql:postgresql'
    testImplementation 'com.oracle.database.jdbc:ojdbc8'
    testImplementation 'com.mysql:mysql-connector-j'
    testImplementation group: 'com.microsoft.sqlserver', name: 'mssql-jdbc', version: mssqlVersion
    testImplementation group: 'com.ibm.db2', name: 'jcc', version: db2Version
    testImplementation group: 'com.redis.testcontainers', name: 'testcontainers-redis-junit', version: testcontainersRedisVersion
    testImplementation group: 'org.testcontainers', name: 'postgresql', version: testcontainersVersion
    testImplementation group: 'org.testcontainers', name: 'oracle-xe', version: testcontainersVersion
    testImplementation group: 'org.testcontainers', name: 'mssqlserver', version: testcontainersVersion
    testImplementation group: 'org.testcontainers', name: 'db2', version: testcontainersVersion
    testImplementation group: 'org.testcontainers', name: 'mysql', version: testcontainersVersion
    testImplementation group: 'org.awaitility', name: 'awaitility', version: awaitilityVersion
    testImplementation 'com.zaxxer:HikariCP'
}

shadowJar {
   archiveClassifier.set('')
}

// Configure Auto Relocation
import com.github.jengelman.gradle.plugins.shadow.tasks.ConfigureShadowRelocation

task relocateShadowJar(type: ConfigureShadowRelocation) {
    target = tasks.shadowJar
    prefix = "com.redis.sidecar.shaded"
}

tasks.shadowJar.dependsOn tasks.relocateShadowJar

jar.finalizedBy shadowJar

jmh {
    iterations = 2 // Number of measurement iterations to do.
    fork = 1 // How many times to fork a single benchmark. Use 0 to disable forking altogether
    warmupIterations = 1 // Number of warmup iterations to do.
    timeUnit = 'us'
    jvmArgs = ['-Xmx1g']
}
